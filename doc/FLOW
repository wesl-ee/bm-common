Here's a break-down of how the common features of bigmike work:

First, it's obvious that a user may be logged in or not. Being in a state of
having logged in is tracked by $_SESSION['id'], which is pulled in by the
login page. This corresponds to the user's ID in the SQL table, which I
cover momentarily.

SECTION DATABASES
Currently, I use mySQL to track logged-in user information. The table
(currently) looks like this

MariaDB [bigmike]> DESCRIBE users;
+--------------------------+--------------+------+-----+-------------------+----------------+
| Field                    | Type         | Null | Key | Default           | Extra          |
+--------------------------+--------------+------+-----+-------------------+----------------+
| id                       | int(11)      | NO   | PRI | NULL              | auto_increment |
| username                 | varchar(20)  | YES  |     | NULL              |                |
| password                 | varchar(128) | YES  |     | NULL              |                |
| signup_date              | datetime     | YES  |     | CURRENT_TIMESTAMP |                |
| last_login               | datetime     | YES  |     | CURRENT_TIMESTAMP |                |
| locked                   | char(1)      | YES  |     | n                 |                |
| failed_logins            | int(11)      | YES  |     | 0                 |                |
| pref_css                 | varchar(64)  | YES  |     | original          |                |
+--------------------------+--------------+------+-----+-------------------+----------------+
I will describe each field briefly; installing further components which rely on bigmike-common
will require additional columns or tables, so please read that documentation also

id
	A user's ID. Kind of arbitrary, but you only have one if you're
	online, so I store it in $_SESSION to keep track of that
username
	max-length 20 character handle
password
	SHA512-CRYPT+HASH formatted password. Can be generated using
	generate_passwd.php or using the *nix mkpasswd utility by the
	following:
	> mkpasswd -m sha512 USER_PASSWORD
	SHA512-CRYPT+HASH passwords are always stored like
	$6$(USER_SALT)$(sha512hash(USER_PASSWORD+USER_SALT))
	and USER_PASSWORD is never stored plain-text
signup_date
	This has no use other than bragging rights
last_login
	Not a very useful field but just read back to the user on log-in
locked
	If set to anything other than 'n', the user will not be able to log
	in. However if the user is already logged in. . .
failed_logins
	Tracks failed login attempts, resets on success
pref_css
	Holds a user's preferred CSS value for persistence across logouts

SECTION USER CSS
User customization is a big part of bigmike. As mentioned earlier in DATABASES,
pref_css in the SQL table holds the users preferred css, which can be
changed anytime in user_preferences.php.

If you want to install a new CSS, find a mascot (preferably a transparent render)
and draft a .css file based on an existing CSS. Then create another block in
the includes/core.php switch statement to define your $_SESSION['session'],
$_SESSION['stylesheet'], and $_SESSION['motd'], it's that simple!

SECTION ONE-TIME ACCOUNT CREATION

Running ./otp outputs a list of 100 one-time passwords that can be used
against the generated otp-challenge file. Save the stdout, it cannot be
recovered if you lose it! And if you do, simply run ./otp again. The
one-time password works on a hash-chain. Essentially, the program generates
the 100th hash in the chain, then asks the user for the 99th hash, which
would be hard to brute-force on its own. If the user-provided 99th hash can
be hashed to yield the 100th hash, the user is allowed to create an account
and the server then stores the 99th hash as its one-time password challenge.
Pretty neat stuff!
